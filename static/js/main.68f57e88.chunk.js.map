{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["cancel","actions","say","text","send","_context","type","value","sharedRecognitions","target","cond","context","needHelp","recResult","promptAndAsk","promptMsg","question","prompt2","initial","states","prompt","entry","on","ENDSPEECH","resetCounter","ask","delay","id","promptAgain","always","count","nomatch","includes","grammar","person","weekday","time","yes_or_no","yes_no","dmMachine","help","goodbye","init","CLICK","welcome","appointment","history","who","RECOGNISED","assign","TIMEOUT","day","how_long","confirm_whole_day","what_time","confirm_with_time","done","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","onClick","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.68f57e88.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, } from \"xstate\";\r\nimport { actions } from 'xstate';\r\nconst { cancel } = actions;\r\nconst cancelTimeout = cancel('timeout');\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))  }\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN') }\r\n\r\n\r\nfunction sharedRecognitions() {\r\n    return [ \r\n        // {on:{TIMEOUT:'.promptAgain'}},\r\n        { target: '#root.dm.help', cond: (context:SDSContext) =>  needHelp(context.recResult) },\r\n        { target: \".nomatch\" }\r\n        ]\r\n}\r\nfunction promptAndAsk({ promptMsg, question, prompt2 }: { promptMsg: Action<SDSContext, SDSEvent>; question: string; prompt2:string }): \r\nMachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        //childs\r\n        states: {\r\n            //Get voice input; reset counter (ignore the counts from previous state)\r\n            prompt: { entry: promptMsg,  on: { ENDSPEECH: {cond: () => resetCounter()===true, target:\"question\" }}  },\r\n            question: {entry: say(question),  on: { ENDSPEECH: \"ask\" } },\r\n            ask: { entry:[listen(), send(\"TIMEOUT\", {delay:7500, id: 'timeout'})],  \r\n                },\r\n            //Fallback states\r\n            //*TECH ISSUE...? say() won't work unless mic is off (when not listening), which depends on a RECOGNISED event being sent first\r\n                // >>But upon RECOGNISED, it will say(reprompt) then go straight to .nomatch\r\n                // >>>Solution: additional onTIMEOUT under onRECOGNISED to prevent going to .nomatch\r\n                \r\n            promptAgain: {entry: [send(\"RECOGNISED\"), say(prompt2)], \r\n                    always: [\r\n                        //if counter<3: counter++ & go to prompt-again state\r\n                        {cond: () => counter() < 3, target:\"question\"},\r\n                        //elif counter>=3: go to init state\r\n                        {target:\"#root.dm.goodbye\"}\r\n                         ] \r\n                              \r\n                },\r\n                \r\n            nomatch: { entry: [say(\"Sorry, I didnt get that\")],  \r\n                       on: { ENDSPEECH: \"question\" } \r\n                    },    \r\n        }\r\n    })\r\n}\r\n\r\n//Counter for timeout state\r\nlet count=0\r\nfunction counter(){\r\n    count+=1\r\n    return count\r\n}\r\nfunction resetCounter(){\r\n    count=0\r\n    return true\r\n}\r\n//test\r\n// console.log(counter()) //1\r\n// console.log(counter()) //2\r\n// console.log(counter()) //3\r\n// resetCounter()\r\n// console.log(counter()) //1\r\n\r\n\r\nlet needHelp = function(text:string):boolean{\r\n    let helpwords = ['help','I need help', 'help me']\r\n    return helpwords.includes(text) };\r\n\r\n\r\nconst grammar: { [index:string]: { person?:string, weekday?:string, time?:string, } } = \r\n{   \r\n    // 'input_phrase: {keytype: 'value'}\r\n    //People\r\n    \"John\": { person: \"John Appleseed\"}, \"Goofy\": { person: \"Goofy Dog\"},\r\n    \"Mickey\": { person: \"Mickey Mouse\"},\"Minnie\": { person: \"Minnie Mouse\"},\r\n    \"Donald\": { person: \"Donald Duck\"},\"Daisy\": { person: \"Daisy Duck\"},\r\n    \"Lisa\": { person: \"Lisa Simpson\"},\"Homer\": { person: \"Homer Simpson\"},\r\n    \"Monty\": { person: \"Montgomery Burns\"},\"Apu\": { person: \"Apu Nahasapeemapetilon\"},\r\n\r\n    //Days of week\r\n    \"on Monday\": { weekday: \"Monday\" }, \"on Tuesday\": { weekday: \"Tuesday\" }, \"on Wednesday\": { weekday: \"Wednesday\" },\r\n    \"on Thursday\": { weekday: \"Thursday\" }, \"on Friday\": { weekday: \"Friday\" }, \"on Saturday\": { weekday: \"Saturday\" },\r\n    \"on Sunday\": { weekday: \"Sunday\" }, \r\n    \"Monday\": { weekday: \"Monday\" }, \"Tuesday\": { weekday: \"Tuesday\" }, \"Wednesday\": { weekday: \"Wednesday\" },\r\n    \"Thursday\": { weekday: \"Thursday\" }, \"Friday\": { weekday: \"Friday\" }, \"Saturday\": { weekday: \"Saturday\" },\r\n    \"Sunday\": { weekday: \"Sunday\" }, \r\n\r\n    //Time of day\r\n    \"1\":{time:\"13:00\"}, \"2\":{time:\"14:00\"}, \"3\":{time:\"15:00\"}, \"4\":{time:\"16:00\" },\r\n    \"5\":{time:\"17:00\"}, \"6\":{time:\"18:00\"}, \"7\":{time:\"19:00\"}, \"8\":{time:\"20:00\" },\r\n    \"9\":{time:\"21:00\"}, \"10\":{time:\"22:00\"}, \"11\":{time:\"15:00\"}, \"12\":{time:\"00:00\" },\r\n    \"at 1\":{time:\"13:00\"}, \"at 2\":{time:\"14:00\"}, \"at 3\":{time:\"15:00\"}, \"at 4\":{time:\"16:00\" },\r\n    \"at 5\":{time:\"17:00\"}, \"at 6\":{time:\"18:00\"}, \"at 7\":{time:\"19:00\"}, \"at 8\":{time:\"20:00\" },\r\n    \"at 9\":{time:\"21:00\"}, \"at 10\":{time:\"22:00\"}, \"at 11\":{time:\"23:00\"}, \"at 12\":{time:\"00:00\" },\r\n}\r\n\r\nconst yes_or_no: { [index:string]:{yes_no?:boolean} } = \r\n{\r\n    \"yes\": {yes_no: true}, \"of course\": {yes_no: true}, \"sure\": {yes_no: true}, \"absolutely\": {yes_no: true},\r\n    \"yeah\": {yes_no: true}, \"yep\": {yes_no: true}, \"okay\": {yes_no: true},\r\n    \"no\": {yes_no: false}, \"nope\": {yes_no: false}, \"no thanks\": {yes_no: false}, \"nah\": {yes_no: false},\r\n\r\n}\r\n\r\n\r\n//STATE MACHINE\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n\r\n        //Come here on recognising 'help'; \r\n        //then go back to last appointment.mainstate (stored in appointment.history)\r\n        help: {\r\n            entry: say(\"I am here if you need help.\"),\r\n            on: { ENDSPEECH: '#root.dm.appointment.history' }\r\n            },\r\n        goodbye: {entry: say(\"You were silent for too many times. Bye for now.\"), \r\n                          \r\n                    //Reset counter and go to init\r\n                     always: {cond: () => resetCounter()===true, target:\"#root.dm.init\"} \r\n            },\r\n        \r\n        \r\n        //State Idle\r\n        init: { \r\n            on: {CLICK: 'welcome'} \r\n            },\r\n\r\n        //state 0; greeting message\r\n        welcome: {\r\n            entry: say(\"Hello, lets create a meeting.\"),\r\n            on: { ENDSPEECH: 'appointment' }\r\n            },\r\n\r\n        appointment :{\r\n            initial: \"who\",\r\n            states: {\r\n        \r\n        //History of appointment making      \r\n        history: {type:'history', history:'shallow'},\r\n\r\n        //State Q1\r\n        who: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n                    },\r\n                    ...sharedRecognitions(),\r\n                    ], \r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: \"\"\r\n                        })), question: 'Who are you meeting with?', prompt2: 'You can say Mickey or Minnie for example'\r\n                    })  \r\n            },\r\n\r\n        //State Q2\r\n        day: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                    cond: (context) => \"weekday\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { weekday: grammar[context.recResult].weekday } }),\r\n                    target: \"how_long\"\r\n                    },...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. ${context.person}.`\r\n                        })), question: 'On which day is your meeting?', prompt2: 'Say a day of the week'\r\n                    })\r\n\r\n            },\r\n\r\n        //State Q3\r\n        how_long: {\r\n            on: { \r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'confirm_whole_day' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'what_time'},\r\n                    ...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. on ${context.weekday}.`\r\n                        })), question: 'Will it take the whole day?', prompt2:'Say yes or no'\r\n                    })\r\n            },\r\n        \r\n        //State Q4: one-step confirmation\r\n        confirm_whole_day: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'done' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'who'},\r\n                    ...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `Alright. Meeting ${context.person} on ${context.weekday} for the whole day.`\r\n                        })), question: 'Shall I create a whole-day appointment?', prompt2:'Say yes or no'\r\n                    })\r\n            },\r\n\r\n        //Two-steps confirmation\r\n        //State Q4a\r\n        what_time: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"confirm_with_time\"\r\n                    },...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `At what time is your meeting?`\r\n                        })), question: 'Say an hour of the day.', prompt2:'You may say at 1, at 2, and so on'\r\n                    })\r\n                \r\n            },\r\n\r\n        //State Q4b\r\n        confirm_with_time: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'done' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'who'},...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `Alright. Meeting ${context.person} on ${context.weekday} at ${context.time}.`\r\n                        })), question: 'Shall I create the appointment?', prompt2:'Say yes or no'\r\n                    })\r\n            },\r\n        //State 5\r\n        done: {\r\n             entry: say(\"Great, your appointment has been made.\"), \r\n             on: { ENDSPEECH: \"#root.dm.init\" } \r\n            },\r\n        }\r\n\r\n    }//End of Appointment State\r\n    }\r\n}\r\n)\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from './dmAppointmentPlus';\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        // TIMEOUT:\"..recStop\", //mic off so that say() can work\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a voice input.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            }),\r\n            speak: asEffect((context) => {\r\n\t            console.log('Speaking...');\r\n                speak({text: context.ttsAgenda })\r\n            }) \r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://guess-the-intent.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n        })\r\n        )\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}