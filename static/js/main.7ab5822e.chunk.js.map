{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","weekday","time","yes_or_no","yes_no","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","assign","context","command","recResult","prompt","entry","ENDSPEECH","ask","nomatch","parse_intent","invoke","id","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intent","name","console","log","onError","choices","always","cond","make_appointment","todo_list","set_timer","who","day","pre_prompt","how_long","confirm_whole_day","what_time","confirm_with_time","done","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","onClick","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.7ab5822e.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\n\r\nconst grammar: { [index:string]: { person?:string, weekday?:string, time?:string, } } = \r\n{   \r\n    // 'input_phrase: {keytype: 'value'}\r\n    //People\r\n    \"John\": { person: \"John Appleseed\"}, \"Goofy\": { person: \"Goofy Dog\"},\r\n    \"Mickey\": { person: \"Mickey Mouse\"},\"Minnie\": { person: \"Minnie Mouse\"},\r\n    \"Donald\": { person: \"Donald Duck\"},\"Daisy\": { person: \"Daisy Duck\"},\r\n\r\n    //Days of week\r\n    \"on Monday\": { weekday: \"Monday\" }, \"on Tuesday\": { weekday: \"Tuesday\" }, \"on Wednesday\": { weekday: \"Wednesday\" },\r\n    \"on Thursday\": { weekday: \"Thursday\" }, \"on Friday\": { weekday: \"Friday\" }, \"on Saturday\": { weekday: \"Saturday\" },\r\n    \"on Sunday\": { weekday: \"Sunday\" }, \r\n    \"Monday\": { weekday: \"Monday\" }, \"Tuesday\": { weekday: \"Tuesday\" }, \"Wednesday\": { weekday: \"Wednesday\" },\r\n    \"Thursday\": { weekday: \"Thursday\" }, \"Friday\": { weekday: \"Friday\" }, \"Saturday\": { weekday: \"Saturday\" },\r\n    \"Sunday\": { weekday: \"Sunday\" }, \r\n\r\n    //Time of day\r\n    \"1\":{time:\"13:00\"}, \"2\":{time:\"14:00\"}, \"3\":{time:\"15:00\"}, \"4\":{time:\"16:00\" },\r\n    \"5\":{time:\"17:00\"}, \"6\":{time:\"18:00\"}, \"7\":{time:\"19:00\"}, \"8\":{time:\"20:00\" },\r\n    \"9\":{time:\"21:00\"}, \"10\":{time:\"22:00\"}, \"11\":{time:\"15:00\"}, \"12\":{time:\"00:00\" },\r\n    \"at 1\":{time:\"13:00\"}, \"at 2\":{time:\"14:00\"}, \"at 3\":{time:\"15:00\"}, \"at 4\":{time:\"16:00\" },\r\n    \"at 5\":{time:\"17:00\"}, \"at 6\":{time:\"18:00\"}, \"at 7\":{time:\"19:00\"}, \"at 8\":{time:\"20:00\" },\r\n    \"at 9\":{time:\"21:00\"}, \"at 10\":{time:\"22:00\"}, \"at 11\":{time:\"15:00\"}, \"at 12\":{time:\"00:00\" },\r\n}\r\n\r\nconst yes_or_no: { [index:string]:{yes_no?:boolean} } = \r\n{\r\n    \"yes\": {yes_no: true}, \"of course\": {yes_no: true}, \"sure\": {yes_no: true}, \"absolutely\": {yes_no: true},\r\n    \"yeah\": {yes_no: true}, \"yep\": {yes_no: true}, \"okay\": {yes_no: true},\r\n    \"no\": {yes_no: false}, \"nope\": {yes_no: false}, \"no thanks\": {yes_no: false}, \"nah\": {yes_no: false},\r\n\r\n}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://guess-my-intent.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n        })\r\n        )\r\n        .then(data => data.json());\r\n\r\n\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        //State Idle\r\n        init: { \r\n            on: {CLICK: 'welcome'} \r\n            },\r\n\r\n        //state 0\r\n        //Ask what to do > rasa(ASRinput) > go to respective state\r\n        \r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [ \r\n                    {\r\n                    target: \"parse_intent\",\r\n                    actions: assign((context) => { return { command: context.recResult } }),\r\n                    },\r\n                    { target: \".nomatch\" }\r\n                    ]\r\n                },\r\n            //welcome child-states\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What would you like to do?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {entry: listen()},\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't get that.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n                }   \r\n            },\r\n        \r\n        //Step1- parse command for intent\r\n        parse_intent: {\r\n            invoke: {\r\n                id: 'guess_my_intent',\r\n                src: (context, event) => nluRequest(context.command),\r\n                onDone: {\r\n                    target: 'choices',\r\n                    actions: [assign((context, event) => { return  {command: event.data.intent.name} }),\r\n                            (context: SDSContext, event: any) => console.log(event.data) ]\r\n                    },\r\n                onError: {\r\n                    target: 'welcome',\r\n                    actions: (context, event) => console.log(event.data)\r\n                    }\r\n                }\r\n            },       \r\n\r\n        //Step2- map intent to target state\r\n        choices: {\r\n                always:[\r\n                { target: 'todo_list', cond: (context) => context.command === 'todo_item' },\r\n                { target: 'set_timer', cond: (context) => context.command === 'timer' },\r\n                { target: 'make_appointment', cond: (context) => context.command === 'appointment' }\r\n                ]\r\n            },\r\n            \r\n           \r\n        \r\n        //Three choices according to intent\r\n        make_appointment: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: { prompt: { entry: say(\"Sure. Let's create an appointment\") } }\r\n            },\r\n        todo_list: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: { prompt: { entry: say(\"Sure, creating a to-do list for you.\") } }\r\n                },\r\n        set_timer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: { prompt: { entry: say(\"Sure, setting a timer for you.\") } }\r\n                },\r\n\r\n        //State Q1\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n                    },\r\n                    { target: \".nomatch\" }\r\n                ]\r\n                },\r\n            //Q1 child-states\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {entry: listen()},\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't get that.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n                }\r\n            },\r\n        //State Q2\r\n        day: {\r\n            initial: \"pre_prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"weekday\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { weekday: grammar[context.recResult].weekday } }),\r\n                    target: \"how_long\"\r\n                    },\r\n                    { target: \".nomatch\" }  ]\r\n                },\r\n            //Q2 child-states\r\n            states: {\r\n                //Repeat heard name first, then ask for day\r\n                pre_prompt: {\r\n                    entry: send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. Meeting ${context.person}.`\r\n                        })),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                    },\r\n                prompt: {\r\n                    entry: send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `On which day is your meeting?`\r\n                        })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {entry: listen()},\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't get that.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n                }\r\n            },\r\n\r\n        //State Q3\r\n        how_long: {\r\n            initial: \"pre_prompt\",\r\n            on: { \r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'confirm_whole_day' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'what_time'},\r\n                    // NoMatch\r\n                    { target: \".nomatch\" }\r\n                    ]\r\n                },\r\n            //Q3 child-states\r\n            states: {\r\n                pre_prompt: {\r\n                    entry: send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Ok, on ${context.weekday}.`\r\n                        })),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                    },\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Will it take the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {\r\n                    entry: listen()\r\n                    },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't get that.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n                }\r\n            },\r\n        \r\n        //State Q4: one-step confirmation\r\n        confirm_whole_day: {\r\n            initial: \"prompt\",\r\n            on: { \r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'done' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'who'},\r\n                    // NoMatch\r\n                    { target: \".nomatch\" }\r\n                    ]\r\n                },\r\n            //Q4 child-states\r\n            states: {\r\n                prompt: {\r\n                    entry: send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Alright. Shall I make an appointment with ${context.person} on ${context.weekday} for the whole day?`\r\n                        })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {\r\n                    entry: listen()\r\n                    },\r\n                nomatch: {\r\n                    entry:\r\n                    send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Sorry I didn't get that. Are you meeting ${context.person} on ${context.weekday} for the whole day?`\r\n                        })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    }\r\n                }\r\n            },\r\n\r\n        //Two-steps confirmation\r\n        //State Q4a\r\n        what_time: {\r\n            initial: \"pre_prompt\",\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"confirm_with_time\"\r\n                    },\r\n                    { target: \".nomatch\" }]\r\n                },\r\n            //Q2 child-states\r\n            states: {\r\n                //Repeat heard name first, then ask for day\r\n                pre_prompt: {\r\n                    entry: send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK.`\r\n                        })),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                    },\r\n                prompt: {\r\n                    entry: send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `At what time is your meeting?`\r\n                        })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {entry: listen()},\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't get that\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n                }\r\n            },\r\n\r\n        //State Q4b\r\n        confirm_with_time: {\r\n            initial: \"prompt\",\r\n            on: { \r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'done' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'who'},\r\n                    // NoMatch\r\n                    { target: \".nomatch\" }\r\n                    ]\r\n                },\r\n            //Q4 child-states\r\n            states: {\r\n                prompt: {\r\n                    entry: send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Alright. Shall I make an appointment with ${context.person} on ${context.weekday} at ${context.time}?`\r\n                        })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {entry: listen()},\r\n                nomatch: {\r\n                    entry: \r\n                    send( (context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Sorry I didn't get that. Are you meeting ${context.person} on ${context.weekday} at ${context.time}?`\r\n                        })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                    }\r\n                }\r\n            },\r\n        //State 5\r\n        done: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: { \r\n                prompt: { \r\n                    entry: say(\"Great, your appointment has been made.\") ,\r\n                    },\r\n                }\r\n            },\r\n        \r\n\r\n        }\r\n    }\r\n)\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a voice input.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://guess-my-intent.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n        })\r\n        )\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}